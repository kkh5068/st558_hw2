---
title: "Base R Programming"
author: "Kim Heagy"
format: html
editor: visual
---

## Task 1: Basic Vector Practice

Creating and Naming the Vectors

```{r}
pre_trt<-c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)
names(pre_trt)<-paste("Subject", 1:20, sep = "_")

post_trt<-c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)
names(post_trt)<-paste("Subject", 1:20, sep = "_")

pre_trt
post_trt
```

Change in blood pressure before and after treatment

```{r}
pressure_change<-(pre_trt-post_trt)
pressure_change
```

Average decrease in blood pressure across all patients

```{r}
mean(pressure_change)
```

Patients which experienced a decrease in blood pressure after treatment \$!!!!Need to figure out how to output the indices too!!!

```{r}
which(pressure_change>0)
```

Subset of patients: those with a positive change, average of the change

```{r}
positive_change<-pressure_change[pressure_change>0]
positive_change
mean(positive_change)
```

##Task 2: Data Frame Practice

Create data frame

```{r}
patient<-paste("Subject", 1:20, sep = "_")
pre_bp<-pre_trt
post_bp<-post_trt
diff_bp<-pressure_change
my_df<-data.frame(patient, pre_bp, post_bp, diff_bp, row.names = NULL)
print(my_df)
```

Patients with negative blood pressure throughout treatment

```{r}
my_df[(my_df$diff_bp < 0),]

my_df$low_bp<-c(my_df$post_bp<120)
knitr::kable(my_df)
```

##List Practice

Create a data frame with additional placebo patient data

```{r}
patient_p<-paste("Subject", 1:10, sep = "_")
pre_bp_p<-c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)
post_bp_p<-c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)
diff_bp_p<-c(pre_bp_p-post_bp_p)
placebo_df<-data.frame(patient_p, pre_bp_p, post_bp_p, diff_bp_p, row.names = NULL)
placebo_df$low_bp<-c(placebo_df$post<120)
placebo_df
print(placebo_df)
```

Create a list

```{r}
p_list<-list(treatment=my_df, placebo=placebo_df)
p_list
print(p_list)
```

Access the first element, 3 times

```{r}
(p_list[1])
(p_list[[1]])
(p_list$treatment)
```

Access placebo data frame, pre_bp column

```{r}
print(p_list$placebo$pre_bp_p)
```

##Control Flow Practice Add blood pressure status to both Treatment and Placebo Data frames

```{r}
my_df$status<-character(20)
placebo_df$status<-character(10)
```

Loop for Treatment (my_df) to categorize the Subjects as Optimal, Borderline, or High

```{r}
for(i in seq_along(p_list$treatment$status)[1:20]){
  if(p_list$treatment$post_bp[i] <= 120) {
      p_list$treatment$status[i] <- "optimal"
        } else if(p_list$treatment$post_bp[i]<=130){
         p_list$treatment$status[i]<-"borderline"
     }else if(p_list$treatment$post_bp[i]>130){
         p_list$treatment$post_bp[i] <- "high"
     }
  }
```

Loop for Placebo (placebo_df) to categorize the Subjects as Optimal, Borderline, or High

```{r}
for(i in seq_along(p_list$placebo$status)[1:10]){
  if(p_list$placebo$post_bp[i] <= 120) {
        p_list$placebo$status[i] <- "optimal"
        } else if(p_list$placebo$post_bp[i] <=130){
         p_list$placebo$status[i]<-"borderline"
     }else if(p_list$placebo$post_bp[i]>130){
         p_list$placebo$status[i] <- "high"
     }
  }
```

##Writing Functions \`\`\`{r} \# Define the function to compute the statistics compute_statistics \<- function(data_list, stat = "mean") { \# Get the function from the quoted string my_fun \<- get(stat)

stat_values \<- numeric(6) stat_names \<- character(6)

columns \<- c("pre_bp", "post_bp", "diff_bp") for (i in 1:2) { data \<- data_list\[\[i\]\] prefix \<- ifelse(i == 1, "treatment", "placebo") for (j in 1:3) { col_name \<- columns\[j\] if (prefix == "placebo") { col_name \<- paste0(col_name, "*p") } stat_values\[(i-1)\*3 + j\] \<- my_fun(data\[\[col_name\]\]) stat_names\[(i-1)\*3 + j\] \<- paste(prefix, columns\[j\], stat, sep = "*") } }

names(stat_values) \<- stat_names

return(stat_values) }

mean_stats \<- compute_statistics(p_list) print(mean_stats)

var_stats \<- compute_statistics(p_list, stat = "var") print(var_stats)

sd_stats \<- compute_statistics(p_list, stat = "sd") print(sd_stats)

min_stats \<- compute_statistics(p_list, stat = "min") print(min_stats)

max_stats \<- compute_statistics(p_list, stat = "max") print(max_stats)

compute_statistics(pre_bp)
